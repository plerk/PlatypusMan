#!/usr/bin/perl

use strict;
use warnings;
use v5.10;
use Getopt::Long qw( GetOptions );
use Pod::Usage qw( pod2usage );
use Path::Class qw( file dir foreign_file );
use Template;
use YAML::XS qw( LoadFile Dump );
use PlatypusMan;
use Archive::Zip;
use File::Temp qw( tempdir );
use HTML::Entities qw( encode_entities );

# PODNAME pmx
# ABSTRACT: s5 presentation generator
# VERSION

=head1 SYNOPSIS

 % pmx foo.pmx

=head1 OPTIONS

=head2 --theme | -t I<theme name>

The s5 theme to use

=head2 --sh_theme | -s I<theme name>

The sh theme to use

=head2 --test

Create in temp directory and open in web browser

=head2 --dir | -d I<dirname>

Location to send output presentations too.

=head2 --help | -h

Display help.

=head2 --version

Display version

=cut

my $theme;
my $sh_theme;
my $test     = 0;
my $dir;

GetOptions(
  'theme|t=s'    => \$theme,
  'sh_theme|s=s' => \$sh_theme,
  'test'         => \$test,
  'dir|d'        => \$dir,
  'help|h'       => sub { pod2usage({ -verbose => 2}) },
  'version'      => sub {
    say 'Platypus Man version ', ($PlatypusMan::VERSION //'dev');
    exit 1;
  },
) || pod2usage(1);

pod2usage(1) unless defined $ARGV[0];

my $pmx_filename = file(shift @ARGV);

unless($pmx_filename->basename =~ /\.pmx$/)
{
  say STDERR "pmx file does not have a .pmx extension";
  exit 2;
}

my $pmx = LoadFile($pmx_filename->stringify);
$pmx->{version} = $PlatypusMan::VERSION // 'dev';
$theme //= $pmx->{theme};
$sh_theme //= $pmx->{sh_theme} // 'acid';

do {
  my $css = $pmx->{css} // '';
  $pmx->{html_header} = qq{
<style type="text/css">
$css
  pre { overflow: auto; }
</style>
<!-- sh -->
<script src="sh/sh_main.js" type="text/javascript"></script>
<script src="sh/sh_perl.js" type="text/javascript"></script>
<script src="sh/sh_xml.js" type="text/javascript"></script>
<link rel="stylesheet" href="sh/sh_$sh_theme.css" />
<script type="text/javascript">
  (function() {
    var save = window.onload;
    window.onload = function() {
      save();
      sh_highlightDocument();
    };
  })();
</script>
};
};


my $tt2 = Template->new({
  INCLUDE_PATH => [
    PlatypusMan->share_dir->subdir('s5')->stringify,
    PlatypusMan->share_dir->subdir('themes')->stringify,
  ],
});

my $basename = $pmx_filename->basename;
$basename =~ s/\.pmx//;

sub content
{
  my $h = shift;
  if(ref $h)
  {
    if($h->{file})
    {
      return scalar $pmx_filename->parent->file($basename, $h->{file})->slurp;
    }
    else
    {
      return "[source not found]";
    }
  }
  else
  {
    return $h;
  }
}

sub recurse
{
  my($first, @rest) = @_;
  return unless defined $first;
  if(ref $first)
  {
    my @styles;
    
    if($first->{height})
    {
      push @styles, "height: " . $first->{height} . "em";
    }
    
    my $style = @styles > 0 ? q{style="} . join(';', @styles) . q{"} : '';
    
    if($first->{p})
    {
      $pmx->{content} .= "<p $style>" . content($first->{p}) . "</p>\n";
    }
    elsif($first->{text})
    {
      $pmx->{content} .= qq{<pre $style>} . encode_entities(content($first->{text})) . qq{</pre>};
    }
    elsif($first->{sh_xml})
    {
      $pmx->{content} .= qq{<pre class="sh_xml" $style>} . encode_entities(content($first->{sh_xml})) . qq{</pre>};
    }
    elsif($first->{sh_perl})
    {
      $pmx->{content} .= qq{<pre class="sh_perl" $style>} . encode_entities(content($first->{sh_perl})) . qq{</pre>\n};
    }
    elsif($first->{html})
    {
      $pmx->{content} .= content($first->{html});
    }
    else
    {
      say STDERR Dump($first);
      die 'bad element';
    }
    recurse(@rest);
  }
  else
  {
    $pmx->{content} .= qq{<ul><li>$first</li>\n};
    while(defined $rest[0] && (! ref $rest[0]) || (ref $rest[0] eq 'ARRAY'))
    {
      my $item = shift @rest;
      if(ref($item) eq 'ARRAY')
      {
        recurse(@{ $item });
      }
      else
      {
        $pmx->{content} .= qq{<li>$item</li>\n};
      }
    }
    $pmx->{content} .= qq{</ul>\n};
    recurse(@rest);
  }
}

$pmx->{content} = '';
foreach my $slide (@{ $pmx->{slides} })
{
  my($title, @rest) = @{ $slide };
  $pmx->{content} .= qq{<div class="slide">\n<h1>$title</h1>\n};
  
  recurse(@rest);
  
  $pmx->{content} .= qq{</div>};
}

if(defined $dir)
{
  $dir = dir( $dir )->subdir($basename);
}
elsif($test)
{
  $dir = dir( tempdir( CLEANUP => 0 ) );
}
elsif(defined $ENV{PLATYPUS_MAN_OUTPUT})
{
  $dir = dir( $ENV{PLATYPUS_MAN_OUTPUT} )->subdir($basename);
}
else
{
  $dir = $pmx_filename->basename;
  $dir =~ s/\.pmx//;
  $dir = $pmx_filename->dir->subdir($dir)->absolute;
}

$dir->mkpath(0, 0755);

do {
  my $sh_dir = $dir->subdir('sh');
  $sh_dir->mkpath(0,0755);
  $sh_dir->file("sh_$sh_theme.css")->spew(PlatypusMan->share_dir->file('sh', 'css', "sh_$sh_theme.min.css")->slurp);
  $sh_dir->file("sh_main.js")->spew(PlatypusMan->share_dir->file('sh', 'sh_main.min.js')->slurp);
  foreach my $lang (qw( xml perl ))
  {
    $sh_dir->file("sh_$lang.js")->spew(PlatypusMan->share_dir->file('sh', 'lang', "sh_$lang.min.js")->slurp);
  }
  $pmx->{sh_theme} = $sh_theme;
};

my $html = '';
$tt2->process(do { $theme // 's5-blank' } . ".tt2", $pmx, \$html) || die $tt2->error;
$dir->file('index.html')->spew($html);

my $zip = Archive::Zip->new;
$zip->read(PlatypusMan->share_dir->file($theme ? ('themes', "$theme.zip") : ('s5', 's5-blank.zip'))->stringify);

foreach my $member ($zip->members)
{
  next if $member->isDirectory;
  my $name = foreign_file('Unix', $member->fileName);
  next if $name->basename =~ /^\./;
  next if $name->basename =~ /\.html$/i;
  $name = $member->fileName;
  next unless $name =~ s{^.*/ui/}{ui/};
  $name = $dir->file($name);
  $name->dir->mkpath(0,0755);
  $member->extractToFileHandle($name->openw);
}

if($test)
{
  if($^O eq 'MSWin32')
  {
    system 'start', $dir->file('index.html');
  }
  elsif($^O eq 'cygwin')
  {
    system 'cygstart', $dir->file('index.html');
  }
  else
  {
    system 'gnome-open', $dir->file('index.html');
  }
}
